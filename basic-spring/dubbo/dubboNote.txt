1、官网：
    -http://dubbo.apache.org/zh-cn/index.html
    -文档：http://dubbo.apache.org/zh-cn/docs/user/quick-start.html
    -教程：https://blog.csdn.net/jingyangV587/article/details/78901937
2、dubbo产生的背景：
    -单一应用架构：网站流量小时，可以使用。
    -垂直应用架构：访问量增大，增加及其带来的收益越来越低，需要将应用拆成多个。
    -分布式服务架构：垂直应用越来越多，应用之间交互不可避免，将核心业务抽取出来，作为独立的服务，
        逐渐形成稳定的服务中心，使前端应用能更快速的响应多变的市场需求。此时，用于提高业务复用及整合的分布式服务框架(RPC)是关键。
    -流动计算架构：当服务越来越多，容量的评估，小服务资源的浪费等问题逐渐显现，此时需增加一个调度中心基于访问压力实时管理集群容量，
        提高集群利用率。此时，用于提高机器利用率的资源调度和治理中心(SOA)是关键。
3、dubbo需求：
    -使用服务注册中心，动态地注册和发现服务，使服务的位置透明。
    -在消费方获取服务提供方地址列表，实现软负载均衡和 Failover，降低对 F5 硬件负载均衡器的依赖，也能减少部分成本。
    -服务很多时，服务之间依赖关系很复杂，dubbo可以帮助架构师理清理关系。
    -可以获取服务每天的调用信息，决定何时增减服务。
4、架构：
    角色说明：
        Provider：暴露服务的服务提供方
        Consumer：调用远程服务的服务消费方
        Registry：服务注册与发现的注册中心
        Monitor：统计服务的调用次数和调用时间的监控中心
        Container：服务运行容器

    调用关系说明：
        Container：启动、加载服务，运行服务提供者。
        Provider：启动时，向注册中心注册自己提供的服务。
        Consumer：
            -启动时，向注册中心订阅自己所需的服务、并缓存url到本地。
            -从提供者地址列表中，基于软负载均衡算法，选一台提供者进行调用，如果调用失败，再选另一台调用。
        Registry：注册中心返回服务提供者地址列表给消费者，如果有变更，注册中心将基于长连接推送变更数据给消费者。
        Monitor：服务消费者和提供者，在内存中累计调用次数和调用时间，定时每分钟发送一次统计数据到监控中心。

5、dubbo特点：
    连通性(即各个角色之间何时通讯)：
        Registry负责服务地址的注册与查找，Consumer和Provider只在启动时和其交互，不转发请求，压力小。
        Monitor：
            -Provider定时每分钟发送汇报被调用时间到监控中心，此时间不包含网络开销。
            -Consumer定时每分钟发送汇报调用时间到监控中心，此时间包含网络开销。
        Registry、Provider、Consumer三者之间为长连接，如果Provider宕机，Registry会推送事件给Consumer。
        Registry和Monitor宕机不影响已运行的Provider、Consumer，Consumer在本地缓存了Provider列表。
        Registry和Monitor都是可选的，Consumer可以直连Provider。

    健壮性(即这4个宕掉后的影响)：
        Monitor宕掉不影响使用。
        数据库宕掉后，注册中心仍能通过缓存提供服务列表查询，但不能注册新服务。
        注册中心对等集群，任意一台宕掉后，将自动切换到另一台。
        注册中心全部宕掉后，服务提供者和服务消费者仍能通过本地缓存通讯。
        服务提供者无状态，任意一台宕掉后，不影响使用。
        服务提供者全部宕掉后，服务消费者应用将无法使用，并无限次重连等待服务提供者恢复。

    伸缩性(即Registry和Provider的增减性能)：
        注册中心为对等集群，可动态增加机器部署实例，所有客户端将自动发现新的注册中心。
        服务提供者无状态，可动态增加机器部署实例，注册中心将推送新的服务提供者信息给消费者。
